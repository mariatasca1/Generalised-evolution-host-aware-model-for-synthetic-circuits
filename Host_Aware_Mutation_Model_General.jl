import Profile

# Define construct parameters
active_dims = [1,0,1,0,1,0];
d = sum(active_dims); # The number of active dimensions
num_genes = Int(div(length(active_dims) ,2)); # Number of added genes
# Run the set-up file
# Include the parameter generation file, which defines essential parameters for the simulation
include("f_params_gen.jl");

base_params = f_params_gen(active_dims);
length_of_proteins = Vector{Float64}(undef, num_genes);
num_genes, N, mass, nut, nq, v_e, K_e, n_R, n_Z, n_Q = base_params[1:10]
length_of_proteins = base_params[11:13]
v_TX_R, v_TX_Z, v_TX_Q, K_TX_R, K_TX_nR, K_Q, h_Q,
m_deg, kb_TL, ku_TL, v_TL, K_TL, K_H, h_H, p_deg = base_params[14:end]


#Record construct-specific params. Alpha = max. TX strength (a proxy for
# promoter strength). Beta = mRNA-ribosome binding strength (a proxy for
# RBS strength). z = mutation probability. Values for 'parts' and for 'z'
# are stored in "part_matrix" and "z_matrix" below. _E/I/M = relating to
# E/I/M-states. _A/B/C = relating to genes A/B/C. By default, each gene
# has the same parameter values, however this can be updated within
# "part_matrix" and "z_matrix". This structure works for frameworks with
# s≤3. For frameworks with s>3, you need to add extra lines for the new
# I-state parameters and update "part_matrix"/"z_matrix".

alpha_E = 1e5;      # Promoter strengths in each state
alpha_I = 1.2e4;
alpha_M = 0;

beta_E = 60;        # RBS strengths in each state
beta_I = 6;
beta_M = 0;

z_M = 1e-6;         # Mutation probabilities for each state
z_I = 1e-2;

M = [0 0 -1; -1 0 0; 0 -1 0];

# active_dims: vector of logicals relating to the system's parts, in
# order of "part_matrix" above. 1 = model mutations to that part. 0 = do
# not. E.g. [0,1,1,0,0,0] -> only consider mutations to the RBS of gene A
# and promoter of gene B.

# s: number of states per dimension. For s>3, need to add in extra
# parameters, as explained in Section 1. The code currently forces each
# dimension to have the same number of states, but this could be changed.
s = 2;

n = s^d; # Number of mutation states in the framework

part_matrix = Array{Float64,2}(undef, 3, Int(2*num_genes) ) # 3 rows, 2*d columns to start

for i in 1:Int(num_genes)
    part_matrix[:, 2i-1] = [alpha_E; alpha_I; alpha_M] ;  # prom_A
    part_matrix[:, 2i]   = [beta_E; beta_I; beta_M] ;     # RBS_A
end

z_matrix = Array{Float64,2}(undef, 2, length(active_dims));

for i in 1:(length(active_dims))
    z_matrix[:, i] = [z_M; z_I];
end

# Define mutation granularity

# 3. Create the framework structure and extract relevant connections

# f_grid_structure: function that labels each state systematically with a
# coordinate ('coord') of length 's', then creates the cell array
# one another. This is required for automatically assigning 'part' and
# 'z' values to each state in the correct order. state_connections is
# structured as follows: Rows: states in order. Columns: (1) index of
# state. (2) coord of state. (3) List of coords of upstream states. (4)
# List of index pairs that each specify a value from the z_matrix for the
# mutation probability of an upstream state. (5-6) Same as (3-4) but for
# downstream states.
include("f_allocate_coords.jl");
state_connections = f_allocate_coords(s, d, n);

# Obtain the 'active' parameters for part strengths and z_values, and
# distribute these across the states in the correct order
include("f_active_construct_params.jl");
active_z_matrix, matrix = f_active_construct_params(active_dims, s, d, n, part_matrix, z_matrix);

# The ODE for each state involves terms regarding (i) number of cells in
# connected upstream states, (ii) mutation probabilities from connected
# upstream states, (iii) mutation probabilities to downstream states. The
# cell array 'state_connections' has this info in an over-extensive and
# coded format. Hence, f_extract_state_connections transfers therequired
# info into defined variables and converts 'coordinates' to numbered
# indices and 'z_matrix index pairs' into probabilities.
include("f_extract_state_connections.jl");
states_up, z_values_up, z_values_dn = f_extract_state_connections(state_connections, active_z_matrix, s, d, n);

# Collate all the parameters in a list
params = (n, base_params...,matrix);

# 4. Initialise variables and call solver

# Initial values for frameworks with [α_E,z_M,α_I,z_I] = [1e5,1e-6,1.2e4,
# 1.2e-2], active_dims = [1,0,1,0,1,0] and s≤3. Values are obtained by
# running pre-simulations with different initial values of m_HA/m_HB/m_HC
# to induce oscillation), then storing the final values of that
# simulation. If you want to initialise frameworks with different
# starting conditions: run one simulation -> uncomment 'ss_store_temp'
# below and save it to memory -> copy its values into a new 'ss_store'
# variable -> comment out ss_store_temp -> run a new simulation.

# ONLY UNCOMMENT TO INITIALISE NEW PARAMETER VALUES
# ss_store_temp = [e(end,:); m_R(end,:); m_Z(end,:); m_Q(end,:); m_HA(end,:);...
#                  m_HB(end,:); m_HC(end,:); TL_R(end,:); TL_Z(end,:);...
#                  TL_Q(end,:); TL_HA(end,:); TL_HB(end,:); TL_HC(end,:);...
#                  R(end,:); Z(end,:); Q(end,:); HA(end,:); HB(end,:); HC(end,:)];

# Initial conditions for the framework types described above
if isequal(active_dims, [1,0,1,0,1,0]) # Each gene has promoter mutations
    if s == 1
        ss_store = [9.41298286321331;185.677494972154;26.8787710116087;4342.26153860989;3638.89393643922;5.91337936843480;942.992240307560;37.4471913170857;1.82980018818135;295.601343413804;254.642757993601;0.413088882673135;61.9328325444737;0.226218902870605;765.090867876456;122291.699191463;11194.3057317164;204.015877253134;620.733081988673];
    elseif s == 2
        ss_store = [9.42250230064014 9.36538679318618 9.36538679318689 9.36539089660674 9.36538679318616 9.36539089660676 9.36539089660676 22.0228139789267;195.872507064853 194.799507697070 194.799507697085 194.798974522080 194.799507697070 194.798974522080 194.798974522080 30.3764066215348;27.4119830145739 27.5764773541257 27.5764773541264 27.5764053868337 27.5764773541257 27.5764053868337 27.5764053868337 6.59647449661740;4347.16766825267 5226.55289333055 5226.55289333068 5226.36464248088 5226.55289333055 5226.36464248088 5226.36464248088 247.382421208330;407.844776505150 3.00000000000000e-323 1.20831750272346 -1.00000000000000e-323 11101.6414469105 3.00000000000000e-323 11101.6124745708 4.90000000000000e-324;3.82501163121454 11101.6414469105 3.00000000000000e-323 -3.00000000000000e-323 1.20831750272341 11101.6124745707 -3.00000000000000e-323 4.90000000000000e-324;6568.63097740108 1.20831750272341 11101.6414469108 11101.6124745708 3.00000000000000e-323 -3.00000000000000e-323 3.00000000000000e-323 4.90000000000000e-324;33.3470191855378 16.0109034156097 16.0109034156102 16.0135119549764 16.0109034156097 16.0135119549763 16.0135119549763 1161.82945495618;1.53401006632187 0.754025100917614 0.754025100917585 0.754148077671563 0.754025100917614 0.754148077671563 0.754148077671563 71.7559044832288;243.325791008968 142.909916384052 142.909916384047 142.928448905796 142.909916384052 142.928448905796 142.928448905796 2691.00553578391; 23.5179598653518 0 0.0330390903534026 0 303.552778147188 0 303.602285697086 4.90000000000000e-323;0.209212199341948 303.552778147188 0 0 0.0330390903534035 303.602285697087 0 4.90000000000000e-323;362.911456326190 0.0330390903534034 303.552778147176 303.602285697087 0 0 0 4.90000000000000e-323;0.183564433674265 0.0900202565321649 0.0900202565321613 0.0900351920725262 0.0900202565321649 0.0900351920725262 0.0900351920725260 44.2837619509255;780.659907346264 542.549197131971 542.549197131969 542.593489353525 542.549197131971 542.593489353525 542.593489353524 6094.55493994411;124885.222306119 102829.017630856 102829.017630856 102833.976662947 102829.017630856 102833.976662947 102833.976662947 228559.324833847;4003.51168851638 8.40000000000000e-323 1.04321374123843 8.40000000000000e-323 9584.71997766803 8.40000000000000e-323 9586.25063953502 -7.90000000000000e-323;42.4279376122871 9584.71997766803 -8.40000000000000e-323 -8.40000000000000e-323 1.04321374123842 9586.25063953503 2.50000000000000e-323 -7.90000000000000e-323;6725.90977307074 1.04321374123842 9584.71997766797 9586.25063953503 -4.40000000000000e-323 4.40000000000000e-323 0 -7.90000000000000e-323]
    elseif s == 3
        ss_store = [9.42822388678767 9.32183157679224 9.36538679318602 9.37634505659096 9.38045168577385 9.34102384091830 9.36538679318702 9.36534979942061 9.36539089660690 9.40260963627673 9.33891850442040 9.36534979942051 9.34345360692332 9.34207302022974 9.34102033677664 9.34102384091805 9.34102033677679 9.34102428439067 9.36538679318599 9.34102384091821 9.36539089660693 9.36534979942057 9.34102033677668 9.34102428439056 9.36539089660695 9.34102428439075 22.0228139789266;195.208358582152 195.880428117402 194.799507697067 195.253140806634 196.596298945399 200.072620820830 194.799507697088 194.804316886225 194.798974522082 191.929963230992 196.131603470010 194.804316886223 198.303400666760 199.872830129986 200.073733548740 200.072620820824 200.073733548743 200.072498360299 194.799507697067 200.072620820828 194.798974522084 194.804316886225 200.073733548741 200.072498360297 194.798974522083 200.072498360300 30.3764066215345;27.3866121856068 27.6277498922817 27.5764773541255 27.6461311828026 27.9059022364930 28.3234978873489 27.5764773541265 27.5771265322663 27.5764053868339 27.4732731905411 27.8911161024822 27.5771265322661 27.9625255303658 28.2882272460018 28.3236616342052 28.3234978873487 28.3236616342054 28.3234797496424 27.5764773541255 28.3234978873488 27.5764053868339 27.5771265322662 28.3236616342052 28.3234797496423 27.5764053868339 28.3234797496425 6.59647449661734;4350.14367610904 5220.99313301881 5226.55289333053 5469.72537833314 6147.15591329235 6491.17871127118 5226.55289333072 5228.25122207682 5226.36464248092 5403.05623111667 6160.05992501499 5228.25122207679 6093.17222143263 6480.40968418202 6491.22334144957 6491.17871127112 6491.22334144960 6491.17378024037 5226.55289333053 6491.17871127116 5226.36464248093 5228.25122207681 6491.22334144958 6491.17378024035 5226.36464248093 6491.17378024039 247.382421208328;499.400919948614 79639.9497609798 -1.00000000000000e-323 10934.1379413109 266.251836544612 1.00000000000000e-323 1.20831750272349 12.1183316626174 1.24000000000000e-322 1287.50413693918 23.4617993691654 -1.00000000000000e-323 83.3905625971994 8598.56094000316 1.00000000000000e-323 23.6888740496816 238.292653592964 1.00000000000000e-323 11101.6414469104 114023.743507846 -1.00000000000000e-323 11101.9027907674 114024.402714192 1.00000000000000e-323 11101.6124745708 114023.670489704 8.28819706541321e-258;3.30029673868262 12.5405530560460 11101.6414469104 117.558031557515 797.499622079543 114023.743507846 3.00000000000000e-323 3.00000000000000e-323 3.50000000000000e-323 4089.96379373713 7991.76216562725 11101.9027907674 2399.76359152977 484.917777542195 114024.402714192 1.00000000000000e-323 -7.40000000000000e-323 -7.40000000000000e-323 1.20831750272343 23.6888740496818 11101.6124745708 12.1183316626174 238.292653592962 114023.670489703 3.00000000000000e-323 1.00000000000000e-323 3.32869958790058e-255;5974.42914173927 986.347200293242 1.20831750272343 71.5862006172687 7431.83192843868 23.6888740496818 11101.6414469108 11101.9027907674 11101.6124745708 26.8724247637112 26366.7608545462 12.1183316626174 25405.2243713981 73996.7140700028 238.292653592962 114023.743507845 114024.402714192 114023.670489704 -4.00000000000000e-323 1.00000000000000e-323 1.24000000000000e-322 1.24000000000000e-322 -7.40000000000000e-323 -7.40000000000000e-323 -1.00000000000000e-323 -7.40000000000000e-323 1.05049861001993e-256;34.7059713484344 3.05342629136707 16.0109034156094 14.4990112098489 10.1992949667213 0.352974108592946 16.0109034156102 15.9873825061715 16.0135119549762 21.4250888522351 3.53487935316507 15.9873825061714 4.78965065784913 0.616910590019484 0.351925983018884 0.352974108592942 0.351925983018887 0.353090334253411 16.0109034156094 0.352974108592945 16.0135119549763 15.9873825061715 0.351925983018885 0.353090334253408 16.0135119549763 0.353090334253412 1161.82945495618;1.59993171227991 0.143340447774804 0.754025100917612 0.683344827981340 0.487694340614477 0.0166071497445077 0.754025100917572 0.752916235352808 0.754148077671549 1.03401030981562 0.172587175852495 0.752916235352813 0.226666000187144 0.0287169996879026 0.0165578322561893 0.0166071497445079 0.0165578322561891 0.0166126184207744 0.754025100917613 0.0166071497445078 0.754148077671548 0.752916235352810 0.0165578322561892 0.0166126184207744 0.754148077671547 0.0166126184207743 71.7559044832289;254.203262967581 27.0747000414921 142.909916384052 135.203573867513 107.436583429773 3.80602625636647 142.909916384045 142.742762665973 142.928448905794 203.388374588024 38.1162217049812 142.742762665974 49.3913921995847 6.57863529819735 3.79472782739154 3.80602625636651 3.79472782739151 3.80727911339248 142.909916384052 3.80602625636648 142.928448905794 142.742762665974 3.79472782739153 3.80727911339249 142.928448905793 3.80727911339246 2691.00553578391;30.0616300659320 414.134619016121 0 270.453319921121 4.76581695674736 0 0.0330390903534027 0.330857119703862 4.90000000000000e-324 46.9825373047346 0.145189069732968 0 0.696253943409692 8.98685511012391 0 0.0138894342474761 0.139301749144054 0 303.552778147187 66.8564804529299 0 303.106374940745 66.6579398397312 0 303.602285697080 66.8784960578674 9.11431993784788e-257;0.189448494357066 0.0670161808740180 303.552778147187 2.98306695516524 13.4799555268641 66.8564804529297 0 0 0 158.152359957226 49.0277995144742 303.106374940746 18.7181897468146 0.481884480952405 66.6579398397314 0 0 0 0.0330390903534040 0.0138894342474760 303.602285697080 0.330857119703862 0.139301749144055 66.8784960578679 0 0 3.66048644616726e-254;343.873893268882 4.92973654710629 0.0330390903534040 1.70504535163406 132.052027102333 0.0138894342474759 303.552778147171 303.106374940744 303.602285697081 1.01840773150377 167.703151027214 0.330857119703863 208.351051034906 74.4040982658938 0.139301749144055 66.8564804529304 66.6579398397308 66.8784960578677 0 0 4.90000000000000e-324 4.90000000000000e-324 0 0 0 0 1.15520665718013e-255;0.191596779040445 0.0170724308365963 0.0900202565321646 0.0814432478634406 0.0579659889518272 0.00192728084556645 0.0900202565321596 0.0898855876340969 0.0900351920725244 0.124912102282633 0.0206724065699683 0.0898855876340976 0.0268174855857320 0.00332007513167275 0.00192154562836677 0.00192728084556648 0.00192154562836675 0.00192791681367891 0.0900202565321647 0.00192728084556646 0.0900351920725242 0.0898855876340971 0.00192154562836677 0.00192791681367892 0.0900351920725242 0.00192791681367890 44.2837619509259;780.613707867642 525.269795216701 542.549197131965 498.606974757759 314.578639926591 83.1130016773896 542.549197131963 542.149657281654 542.593489353519 506.797247491747 302.610280848867 542.149657281654 330.136562925340 106.574897153960 83.0129380493287 83.1130016773896 83.0129380493286 83.1241177695435 542.549197131966 83.1130016773896 542.593489353519 542.149657281654 83.0129380493287 83.1241177695434 542.593489353519 83.1241177695433 6094.55493994411;124887.145169560 100880.137669179 102829.017630856 96152.1216037094 69111.9480558760 18194.9298848803 102829.017630856 102784.262345055 102833.976662946 97923.1070687317 66435.0060340063 102784.262345055 72502.8316233008 23996.5498410554 18170.6080335999 18194.9298848803 18170.6080335999 18197.5755283879 102829.017630856 18194.9298848803 102833.976662946 102784.262345055 18170.6080335999 18197.5755283879 102833.976662946 18197.5755283879 228559.324833847;4537.45535012685 12528.1697235480 1.00000000000000e-322 8068.64741528365 806.660776494505 -1.10000000000000e-322 1.04321374123844 10.4471782075893 1.50000000000000e-322 509.912252296345 31.0924221722844 1.00000000000000e-322 440.725949713319 1162.62859195184 1.10000000000000e-322 0.454776612694760 4.56112156860120 -1.10000000000000e-322 9584.71997766793 2190.98866050737 1.00000000000000e-322 9570.91785631925 2184.51054437485 1.10000000000000e-322 9586.25063953491 2191.70700827139 4.53059849469930e-255;48.5184790179944 201.484626607920 9584.71997766792 825.390850794866 157.223670183576 2190.98866050737 -1.00000000000000e-322 -4.40000000000000e-323 -4.40000000000000e-323 7243.80411896270 663.592865411301 9570.91785631926 254.278799809508 41.9907534375075 2184.51054437485 -3.50000000000000e-323 -3.50000000000000e-323 -3.50000000000000e-323 1.04321374123844 0.454776612694761 9586.25063953491 10.4471782075893 4.56112156860119 2191.70700827139 -1.00000000000000e-322 -3.50000000000000e-323 1.81957562341053e-252;6008.98441234873 72.7382157035275 1.04321374123844 20.9572604397356 4417.45620913385 0.454776612694761 9584.71997766786 9570.91785631925 9586.25063953491 179.021050792328 6894.01382112977 10.4471782075893 6032.89471632756 1521.22246128460 4.56112156860119 2190.98866050738 2184.51054437485 2191.70700827139 1.00000000000000e-322 -1.04000000000000e-322 1.50000000000000e-322 1.50000000000000e-322 1.10000000000000e-322 1.10000000000000e-322 1.00000000000000e-322 -1.00000000000000e-323 5.74236759053549e-254];
    else # s>3
        ss_store = ones(19,n);
        ss_store[6:7,:] = 0; # Set m_HB/m_HC as different to induce oscillations
    end
else # Mutations to a different combination of parts
    ss_store = ones(19,n);
    ss_store[6:7,:] = 0; # Set m_HB/m_HC as different to induce oscillations
end

# Assign initial values to starting variables
var_0 = Float64[]
subpop_0 = hcat(N, zeros(1, n-1)) # Assume population always starts as all-E-state
append!(var_0, subpop_0)
for i in 1:(Int(10 + 3 * num_genes))
    append!(var_0, ss_store[i, :]);
end


#Let's solve it.
tspan = (0, 1000); # Simulation time range

using DifferentialEquations
using Profile
using ForwardDiff
include("f_ODEs_generalisation.jl")
parameters = (params, M, states_up, z_values_up, z_values_dn);
prob = ODEProblem((y, p , t) -> f_ODEs_generalisation(t, y , p[1], p[2], p[3], p[4], p[5]), var_0, tspan, parameters)
Profile.init(n = 10^7, delay = 0.01)
Profile.clear()

@profile sol = solve(prob, Rodas5P(autodiff = false), reltol=1e-8, abstol=1e-8, progress = true)
@show sol.destats
open("profile_output.txt", "w") do io 
    redirect_stdout(io) do 
        Profile.print(format=:flat, groupby =[:thread, :task])
    end
end

y = sol;
#5. Extract variables and calculate any terms required

x = 1; # Initialise for automatic numbering
subpop = y[x:x+n-1, :]; x=x+n;
e = y[x:x+n-1,:]; x=x+n;
m_R = y[x:x+n-1, :]; x=x+n;
m_Z = y[x:x+n-1,:]; x=x+n;
m_Q = y[x:x+n-1,:]; x=x+n;

vector_m_HA = Vector{Matrix{Float64}}()
for i in 1:num_genes
    push!(vector_m_HA, y[x:x+n-1,:]);
    x = x+n;
end

TL_R = y[x:x+n-1,:]; x=x+n;
TL_Z = y[x:x+n-1,:]; x=x+n;
TL_Q = y[x:x+n-1,:]; x=x+n;

vector_TL_HA = Vector{Matrix{Float64}}()
for i in 1:num_genes
    push!(vector_TL_HA, y[x:x+n-1,:]);
    x = x+n;
end

R = y[x:x+n-1, :]; x=x+n;
Z = y[x:x+n-1, :]; x=x+n;
Q = y[x:x+n-1, :]; x=x+n;

vector_HA = Vector{Matrix{Float64}}()
for i in 1:num_genes
    push!(vector_HA, y[x:x+n-1, :]);
    x = x+n;
end

# Calculate growth rate (note: to analyse more rates, copy the relevant
# code from the ODE script and insert below)
TL_rate = (v_TL * e) ./ (K_TL .+ e);
TL_all = TL_R + TL_Z + TL_Q;
for i in 1:Int(num_genes)
    TL_all = TL_all + vector_TL_HA[i];
end
GR = TL_rate .* TL_all / mass;

using Plots

xx = 1 ; # Choose state number (e.g. 1 = E-state)

plot(subpop[xx,:],
     xlabel = "Time/h",
     ylabel = "No. cells",
     xlim = (0, 36),
     ylim = (0, 1e9),
     size = (450, 325),
     legend = false)

# Optional: Display plot window at specific position (not directly supported in all backends)
# But plot size and content are handled as above.
